#!/bin/sh
# $Header: /var/lib/cvsd/var/lib/cvsd/gpgutils/src/gpgverifyfiles,v 1.2 2012-10-30 17:01:01 timb Exp $
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2007
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>

usage() {
	printf "usage: $0 <signedfilename> [--signeddirectoryname <signeddirectoryname> --hashflag <hashflag>]\n\thashflag: 0 - MD5 only signed hashes, 1 - multiple, extensible signed hashes\n"
	exit 0
}

checkpermissions() {
	filename="$1"
	case "`ls -l \"$filename\"`" in
		"?????w????*")
			printf "E: $filename has bad permissions\n"
			exit 0
			;;
		"?????????w")
			printf "E: $filename has bad permissions\n"
			exit 0
			;;
	esac
}

if [ -f .gpgutils ]
then
	checkpermissions .gpgutils
	source .gpgutils
else
	if [ ! -f "$HOME/.gpgutils" ]
	then
		gnupguserid="`gpg --list-secret-keys | grep uid | sed \"s/.*<\(.*@.*\)>.*/\1/g\" | head -1`"
		echo "GPGUTILS_HOMEDIR=\"\$HOME/.gnupg\"" > "$HOME/.gpgutils"
		echo "GPGUTILS_USERID=\"$gnupguserid\"" >> "$HOME/.gpgutils"
		echo "GPGUTILS_BINPATH=\"/bin:/usr/bin\"" >> "$HOME/.gpgutils"
		chmod g=,o= "$HOME/.gpgutils"
	fi
	checkpermissions "$HOME/.gpgutils"
	source "$HOME/.gpgutils"
fi
gnupgflags=""
if [ "$GPGUTILS_HOMEDIR" != "" ]
then
	gnupgflags="$gnupgflags --homedir $GPGUTILS_HOMEDIR"
fi
if [ "$GPGUTILS_BINPATH" != "" ]
then
	PATH="$GPGUTILS_BINPATH"
fi

signeddirectoryname="."
hashflag=1
signedfilename=""
while [ "$1" != "" ]
do
	case "$1" in
		"--help")
			usage
			;;
		"--signeddirectoryname")
			shift
			signeddirectoryname="$1"
			;;
		"--hashflag")
			shift
			hashflag="$1"
			;;
		*)
			signedfilename="$1"
			;;
	esac
	shift
done
if [ ! -d "$signeddirectoryname" ]
then
	usage
fi
if [ "$hashflag" -ne "0" -a "$hashflag" -ne "1" ]
then
	usage
fi
if [ "$signedfilename" = "" -o ! -f "$signedfilename" ]
then
	usage
fi

tempfilename="`tempfile`"
cat "$signedfilename" | gpg --decrypt > $tempfilename 2> /dev/null
if [ "$?" -eq "0" ]
then
	printf "I: Signature OK\n"
	for filename in `find $signeddirectoryname -type f | sed "s/^.\///g"`
	do
		if [ "$hashflag" -eq "0" ]
		then
			actualmd5="`md5sum $filename | awk '{print $1}'`"
			signedmd5="`grep "  $filename$" $tempfilename | awk '{print $1}'`"
			if [ "$actualmd5" = "$signedmd5" ]
			then
				printf "I: $filename OK\n"
			else
				if [ "$signedmd5" = "" ]
				then
					printf "W: $filename new\n" 
				else
					printf "E: $filename changed\n"
				fi
			fi
			cat "$tempfilename" | while read signedmd5 filename
			do
				if [ ! -f "$signeddirectoryname/$filename" ]
				then
					printf "W: $filename missing\n"
				fi
			done
		else
			actualmd5="`md5sum $filename | awk '{print $1}'`"
			signedmd5="`grep "  $filename$" $tempfilename | grep "^MD5" | awk '{print $2}'`"
			if [ "$actualmd5" = "$signedmd5" ]
			then
				printf "I: $filename OK (MD5)\n"
			else
				if [ "$signedmd5" = "" ]
				then
					printf "W: $filename new (MD5)\n" 
				else
					printf "E: $filename changed (MD5)\n"
				fi
			fi
			actualsha1="`sha1sum $filename | awk '{print $1}'`"
			signedsha1="`grep "  $filename$" $tempfilename | grep "^SHA1" | awk '{print $2}'`"
			if [ "$actualsha1" = "$signedsha1" ]
			then
				printf "I: $filename OK (SHA1)\n"
			else
				if [ "$signedsha1" = "" ]
				then
					printf "W: $filename new (SHA1)\n" 
				else
					printf "E: $filename changed (SHA1)\n"
				fi
			fi
			cat "$tempfilename" | while read hashtype signedmd5 filename
			do
				if [ ! -f "$signeddirectoryname/$filename" ]
				then
					printf "W: $filename missing\n"
				fi
			done
		fi
	done
else
	printf "E: Signature bad\n"
fi
rm "$tempfilename"
exit 1
